// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/dao/async_sms.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/dao/async_sms.go -destination=internal/repository/dao/mock/sms_mock.go -package=daomock
//

// Package daomock is a generated GoMock package.
package daomock

import (
	context "context"
	dao "example/wb/internal/repository/dao"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAsyncSmsDao is a mock of AsyncSmsDao interface.
type MockAsyncSmsDao struct {
	ctrl     *gomock.Controller
	recorder *MockAsyncSmsDaoMockRecorder
}

// MockAsyncSmsDaoMockRecorder is the mock recorder for MockAsyncSmsDao.
type MockAsyncSmsDaoMockRecorder struct {
	mock *MockAsyncSmsDao
}

// NewMockAsyncSmsDao creates a new mock instance.
func NewMockAsyncSmsDao(ctrl *gomock.Controller) *MockAsyncSmsDao {
	mock := &MockAsyncSmsDao{ctrl: ctrl}
	mock.recorder = &MockAsyncSmsDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsyncSmsDao) EXPECT() *MockAsyncSmsDaoMockRecorder {
	return m.recorder
}

// GetWaitingSMS mocks base method.
func (m *MockAsyncSmsDao) GetWaitingSMS(ctx context.Context) (dao.AsyncSms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWaitingSMS", ctx)
	ret0, _ := ret[0].(dao.AsyncSms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWaitingSMS indicates an expected call of GetWaitingSMS.
func (mr *MockAsyncSmsDaoMockRecorder) GetWaitingSMS(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWaitingSMS", reflect.TypeOf((*MockAsyncSmsDao)(nil).GetWaitingSMS), ctx)
}

// Insert mocks base method.
func (m *MockAsyncSmsDao) Insert(ctx context.Context, s dao.AsyncSms) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockAsyncSmsDaoMockRecorder) Insert(ctx, s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockAsyncSmsDao)(nil).Insert), ctx, s)
}

// MarkFailed mocks base method.
func (m *MockAsyncSmsDao) MarkFailed(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkFailed", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkFailed indicates an expected call of MarkFailed.
func (mr *MockAsyncSmsDaoMockRecorder) MarkFailed(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFailed", reflect.TypeOf((*MockAsyncSmsDao)(nil).MarkFailed), ctx, id)
}

// MarkSuccess mocks base method.
func (m *MockAsyncSmsDao) MarkSuccess(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkSuccess", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkSuccess indicates an expected call of MarkSuccess.
func (mr *MockAsyncSmsDaoMockRecorder) MarkSuccess(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSuccess", reflect.TypeOf((*MockAsyncSmsDao)(nil).MarkSuccess), ctx, id)
}
